/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Generic v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to be used with the "BSS Soundweb Generic.umc" module
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
ANALOG_INPUT value$;
STRING_INPUT objectID$[3];
ANALOG_INPUT stateVariable$;
DIGITAL_INPUT subscribe$;
BUFFER_INPUT rx$[400];

ANALOG_OUTPUT value_fb$;
STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK;
STRING tempString[40];  
STRING stateVariable[2];
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE stateVariable$
{
	stateVariable = chr(high(stateVariable$)) + chr(low(stateVariable$));
}

CHANGE value$
{
	makeString(tx$, "\x88\x00\x00\x03%s%s\x00\x00%s%s\x03\x03\x03\x03\x03", objectID$, stateVariable, chr(high(value$)), chr(low(value$)));
}
  
PUSH subscribe$
{
	wait(20)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, stateVariable);  //VALUE
		processlogic();
	}
}  

RELEASE subscribe$
{
	makeString(tx$, "\x8A\x00\x00\x03%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, stateVariable);  //VALUE
	processlogic();
}  

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{                 
					if( byte(tempString, 9) = byte(stateVariable, 1) && byte(tempString, 10) = byte(stateVariable, 2) )
					{
						value_fb$ = (byte(tempString, 13) * 256) + byte(tempString, 14);
					}
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK = 1;
}
