/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Audio Soundweb London Node v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
BUFFER_INPUT modulesTx$[1000];
STRING_INPUT node$[2];
BUFFER_INPUT comRx$[1000];

STRING_OUTPUT modulesRx$;
STRING_OUTPUT comTx$;    
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK1;
STRING tempString1[80]; 
INTEGER checksum, i;
STRING sendString[80];
INTEGER xOK2;
STRING tempString2[80];
STRING tempString3[80];
INTEGER j;
STRING receiveString[80];
INTEGER marker1, marker2;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function send(STRING str1)
{        
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, i);
		if (byte(str1, i) = 2 || byte(str1, i) = 3 || byte(str1, i) = 6 || byte(str1, i) = 21 || byte(str1, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(comTx$, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(comTx$, "\x02%s%s\x03", sendString, chr(checksum));
	}                                      
}

String_Function receive(STRING str2)
{           
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE modulesTx$
{        
	if (xOK1)
	{
		xOK1 = 0;
		while (len(modulesTx$))
		{                 
			marker1 = find("\x03\x03\x03\x03\x03", modulesTx$);
			marker2 = marker1 + 5;    
			if (marker2 <= len(modulesTx$))
			{
				while (byte(modulesTx$, marker2) = 3)
				{
					marker1 = marker1 + 1;
					marker2 = marker2 + 1;  
					if (marker2 > len(modulesTx$))
					{
						break;
					}
				} 
			}
			if (marker1)
			{                   
				marker1 = marker1 + 4;
				tempString1 = remove(mid(modulesTx$, 1, marker1), modulesTx$);
				makeString(tempString1, "%s%s%s", left(tempString1, 1), node$, right(tempString1, len(tempString1)-3));
				call send(left(tempString1, len(tempString1)-5));
				clearbuffer(tempString1);
			}                            
		}
		xOK1 = 1;
	}
}

CHANGE comRx$
{
	if (xOK2)
	{
		xOK2 = 0;
		while (len(comRx$))
		{
			if (byte(comRx$, 1) = 6)
			{
				tempString2 = remove("\x06", comRx$);
			}
			else
			{
				if (find("\x03", comRx$))
				{
					tempString2 = remove("\x03", comRx$);   
					tempString3 = receive(tempString2);
 					if((len(tempString3) >= 4) && (byte(tempString3,3) = byte(node$,1)) && (byte(tempString3,4) = byte(node$,2))) //make sure message is intended for this node
					{
						modulesRx$ = tempString3 + "\x03\x03\x03\x03";
					}
				} 
			}                                                              
			clearbuffer(tempString2);
			clearbuffer(tempString3);
		}
		xOK2 = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK1 = 1;
	xOK2 = 1;
}
