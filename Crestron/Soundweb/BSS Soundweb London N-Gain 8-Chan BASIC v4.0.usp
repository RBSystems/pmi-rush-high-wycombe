/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "N-Gain 8 Chan Basic v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#HELP_BEGIN
	Use only inside Soundweb London N-Gain 8-Chan BASIC.umc macro!!!
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Enable_Feedback$,Chan1_Mute$,Chan2_Mute$,Chan3_Mute$,Chan4_Mute$,Chan5_Mute$,Chan6_Mute$,Chan7_Mute$,Chan8_Mute$,MasterOut_Mute$;
ANALOG_INPUT Chan1_Vol$,Chan2_Vol$,Chan3_Vol$,Chan4_Vol$,Chan5_Vol$,Chan6_Vol$,Chan7_Vol$,Chan8_Vol$,MasterVol$,Chan_Offset$;
BUFFER_INPUT rx$[400];
STRING_INPUT objectID$[3];

DIGITAL_OUTPUT Chan1_Mute_FB$,Chan2_Mute_FB$,Chan3_Mute_FB$,Chan4_Mute_FB$,Chan5_Mute_FB$,Chan6_Mute_FB$,Chan7_Mute_FB$,Chan8_Mute_FB$,MasterOut_Mute_FB$;
ANALOG_OUTPUT  Chan1_Vol_FB$,Chan2_Vol_FB$,Chan3_Vol_FB$,Chan4_Vol_FB$,Chan5_Vol_FB$,Chan6_Vol_FB$,Chan7_Vol_FB$,Chan8_Vol_FB$,MasterVol_FB$;
STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER offset,feedback,stateVar,SV,stateVarSub, stateVarUnSub;
STRING returnString[4];
INTEGER returnI,Chan1_Vol,Chan2_Vol,Chan3_Vol,Chan4_Vol,Chan5_Vol,Chan6_Vol,Chan7_Vol,Chan8_Vol,MasterVol;

INTEGER xOK,i;
STRING tempString[40]; 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function iToVolumePercent(INTEGER int)
{                 
	if (int MOD 2 = 0)
	{                   
		returnString = "\x00" + chr(int/2) + "\x00\x00";
	}
	else 
	{
		returnString = "\x00" + chr(int/2) + "\x80\x00";
	} 	
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{                     
	if (!(mid(str, 3, 1) = "\x00"))
	{                   
		returnI = (byte(str, 2)*2)+1;
	}
	else 
	{
		returnI = byte(str, 2)*2;
	} 	
    Return (returnI);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Change Chan_Offset$
{
  	offset = Chan_Offset$*8;//zero for channels 1-8 (no offset); 1 for channels 9-16
}

PUSH Enable_Feedback$
{
	wait(20)
	{
 		feedback = 1;
		for(i = 1 to 8) //subscribe to all variables for feedback
		{
	    stateVarSub = ((i+offset)-1) + 32; //Mute SV's
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MUTE   	    
	   	stateVarSub = ((i+offset)-1); //gain SV's
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Volumes
		}
		stateVarSub = 97; //Master Mute
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Master MUTE   	    
		stateVarSub = 96; //Master Gain
		makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Master Volume
	}
}

RELEASE Enable_FeedBack$
{
 	feedback = 0;
	for(i = 1 to 8) //subscribe to all variables for feedback
	{
    stateVarSub = ((i+offset)-1) + 32;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MUTE   	    
    stateVarSub = ((i+offset)-1);
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Volumes
	}
	stateVarSub = 97;
	makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Master MUTE   	    
  stateVarSub = 96;
	makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//Master Volume
}

PUSH Chan1_Mute$
{        
	stateVar = ((1+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

RELEASE Chan1_Mute$
{        
	stateVar = ((1+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

PUSH Chan2_Mute$
{        
	stateVar = ((2+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

RELEASE Chan2_Mute$
{        
	stateVar = ((2+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

PUSH Chan3_Mute$
{        
	stateVar = ((3+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

RELEASE Chan3_Mute$
{        
	stateVar = ((3+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

PUSH Chan4_Mute$
{        
	stateVar = ((4+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

RELEASE Chan4_Mute$
{        
	stateVar = ((4+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

PUSH Chan5_Mute$
{        
	stateVar = ((5+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	if(feedback) //send subscribe (GET) string
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
	}
}

RELEASE Chan5_Mute$
{        
	stateVar = ((5+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}


PUSH Chan6_Mute$
{        
	stateVar = ((6+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
RELEASE Chan6_Mute$
{        
	stateVar = ((6+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
PUSH Chan7_Mute$
{        
	stateVar = ((7+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
RELEASE Chan7_Mute$
{        
	stateVar = ((7+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
PUSH Chan8_Mute$
{        
	stateVar = ((8+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
RELEASE Chan8_Mute$
{        
	stateVar = ((8+offset)-1) + 32;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}

PUSH MasterOut_Mute$
{        
	stateVar = 97;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
RELEASE MasterOut_Mute$
{        
	stateVar = 97;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}

CHANGE Chan1_Vol$
{	
	if(Chan1_Vol <> Chan1_Vol$)
	{
		stateVar = ((1+offset)-1);
    	Chan1_Vol = Chan1_Vol$;
		Chan1_Vol_FB$ = Chan1_Vol$;
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan1_Vol$));		
	}
}
CHANGE Chan2_Vol$
{	
	if(Chan2_Vol <> Chan2_Vol$)
	{
    	Chan2_Vol = Chan2_Vol$;
		Chan2_Vol_FB$ = Chan2_Vol$;
		stateVar = ((2+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan2_Vol$));		
	}
}

CHANGE Chan3_Vol$
{	
	if(Chan3_Vol <> Chan3_Vol$)
	{
    	Chan3_Vol = Chan3_Vol$;
		Chan3_Vol_FB$ = Chan3_Vol$;
		stateVar = ((3+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan3_Vol$));		
	}
}
CHANGE Chan4_Vol$
{	
	if(Chan4_Vol <> Chan4_Vol$)
	{
    	Chan4_Vol = Chan4_Vol$;
		Chan4_Vol_FB$ = Chan4_Vol$;
		stateVar = ((4+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan4_Vol$));		
	}
}
CHANGE Chan5_Vol$
{	
	if(Chan5_Vol <> Chan5_Vol$)
	{
    	Chan5_Vol = Chan5_Vol$;
		Chan5_Vol_FB$ = Chan5_Vol$;
		stateVar = ((5+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan5_Vol$));		
	}
}
CHANGE Chan6_Vol$
{	
	if(Chan6_Vol <> Chan6_Vol$)
	{
    	Chan6_Vol = Chan6_Vol$;
		Chan6_Vol_FB$ = Chan6_Vol$;
		stateVar = ((6+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan6_Vol$));		
	}
}
CHANGE Chan7_Vol$
{	
	if(Chan7_Vol <> Chan7_Vol$)
	{
    	Chan7_Vol = Chan7_Vol$;
		Chan7_Vol_FB$ = Chan7_Vol$;
		stateVar = ((7+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan7_Vol$));		
	}
}
CHANGE Chan8_Vol$
{	
	if(Chan8_Vol <> Chan8_Vol$)
	{
    	Chan8_Vol = Chan8_Vol$;
		Chan8_Vol_FB$ = Chan8_Vol$;
		stateVar = ((8+offset)-1);
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(Chan8_Vol$));		
	}
}

CHANGE MasterVol$
{	
	if(MasterVol <> MasterVol$)
	{
    	MasterVol = MasterVol$;
		MasterVol_FB$ = MasterVol$;
		stateVar = 96;
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(MasterVol$));		
	}
}

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))//ObjectID
				{   
					SV = ((byte(tempString, 9) * 256 ) + byte(tempString, 10)); //SV
					
                    if((SV >= 32 ) & (SV <> 96))
					{
						if(((1+Offset)-1)+32 = SV)//mute Chan1
	                    	Chan1_Mute_FB$ = byte(tempString, 14);
						else if(((2+Offset)-1)+32 = SV)//mute Chan2
	                    	Chan2_Mute_FB$ = byte(tempString, 14);
						else if(((3+Offset)-1)+32 = SV)//mute Chan3
	                    	Chan3_Mute_FB$ = byte(tempString, 14);
						else if(((4+Offset)-1)+32 = SV)//mute Chan4
	                    	Chan4_Mute_FB$ = byte(tempString, 14);
						else if(((5+Offset)-1)+32 = SV)//mute Chan5
	                    	Chan5_Mute_FB$ = byte(tempString, 14);
						else if(((6+Offset)-1)+32 = SV)//mute Chan6
	                    	Chan6_Mute_FB$ = byte(tempString, 14);
						else if(((7+Offset)-1)+32 = SV)//mute Chan7
	                    	Chan7_Mute_FB$ = byte(tempString, 14);
						else if(((8+Offset)-1)+32 = SV)//mute Chan8
	                    	Chan8_Mute_FB$ = byte(tempString, 14);
						else if(97 = SV)//MasterMute
	                    	MasterOut_Mute_FB$ = byte(tempString, 14);

					}
					else //gain
					{
                        if(((1+Offset)-1) = SV)//Volume Channel 1
						{
							Chan1_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan1_Vol_FB$ = Chan1_Vol;
						}
                        else if(((2+Offset)-1) = SV)//Volume Channel 2
						{
							Chan2_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan2_Vol_FB$ = Chan2_Vol;
						}
                        else if(((3+Offset)-1) = SV)//Volume Channel 3
						{
							Chan3_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan3_Vol_FB$ = Chan3_Vol;
						}
                        else if(((4+Offset)-1) = SV)//Volume Channel 4
						{
							Chan4_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan4_Vol_FB$ = Chan4_Vol;
						}
                        else if(((5+Offset)-1) = SV)//Volume Channel 5
						{
							Chan5_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan5_Vol_FB$ = Chan5_Vol;
						}
                        else if(((6+Offset)-1) = SV)//Volume Channel 6
						{
							Chan6_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan6_Vol_FB$ = Chan6_Vol;
						}
                        else if(((7+Offset)-1) = SV)//Volume Channel 7
						{
							Chan7_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan7_Vol_FB$ = Chan7_Vol;
						}
                        else if(((8+Offset)-1) = SV)//Volume Channel 8
						{
							Chan8_Vol = volumePercentToI(mid(tempString, 11, 4));
							Chan8_Vol_FB$ = Chan8_Vol;
						}
                        else if(96 = SV)//Volume Master Out
						{
							MasterVol = volumePercentToI(mid(tempString, 11, 4));
							MasterVol_FB$ = MasterVol;
						}
					}
		
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;	
	Offset = 0;
}


