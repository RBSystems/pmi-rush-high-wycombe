/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Meter v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to be used with the "BSS Soundweb Meter.umc" module
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
ANALOG_INPUT attack$, release$, reference$; 
DIGITAL_INPUT subscribe$;
STRING_INPUT objectID$[3];
BUFFER_INPUT rx$[400];
             
ANALOG_OUTPUT attack_fb$, release_fb$, reference_fb$;
STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK;
STRING tempString[40];
STRING returnString[4];
INTEGER returnI,subscribe;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function iToVolumePercent(INTEGER int)
{                 
	if (int MOD 2 = 0)
	{                   
		returnString = "\x00" + chr(int/2) + "\x00\x00";
	}
	else 
	{
		returnString = "\x00" + chr(int/2) + "\x80\x00";
	} 	
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{                     
	if (!(mid(str, 3, 1) = "\x00"))
	{                   
		returnI = (byte(str, 2)*2)+1;
	}
	else 
	{
		returnI = byte(str, 2)*2;
	} 	
    Return (returnI);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH subscribe$
{
	wait(20)
	{
		makeString(tx$, "\x8E\x00\x00\x03%s\x00\x01\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //ATTACK
		processlogic();
		makeString(tx$, "\x8E\x00\x00\x03%s\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //RELEASE
		processlogic();
		makeString(tx$, "\x8E\x00\x00\x03%s\x00\x03\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //REFERENCE
		processlogic();
		subscribe = subscribe$;
  }
}

RELEASE subscribe$
{
	makeString(tx$, "\x8F\x00\x00\x03%s\x00\x01\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //ATTACK
	processlogic();
	makeString(tx$, "\x8F\x00\x00\x03%s\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //RELEASE
	processlogic();
	makeString(tx$, "\x8F\x00\x00\x03%s\x00\x03\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //REFERENCE
	processlogic();
	subscribe = subscribe$;
}

CHANGE attack$
{
	makeString(tx$, "\x8D\x00\x00\x03%s\x00\x01%s\x03\x03\x03\x03\x03", objectID$, iToVolumePercent(attack$));
	if(subscribe)
	{
		makeString(tx$, "\x8F\x00\x00\x03%s\x00\x01\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //ATTACK
		processlogic();		
	}
}
  
CHANGE release$
{
	makeString(tx$, "\x8D\x00\x00\x03%s\x00\x02%s\x03\x03\x03\x03\x03", objectID$, iToVolumePercent(release$));
	if(subscribe)
	{
		makeString(tx$, "\x8F\x00\x00\x03%s\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //RELEASE
		processlogic();		
	}
}
  
CHANGE reference$
{
	makeString(tx$, "\x8D\x00\x00\x03%s\x00\x03%s\x03\x03\x03\x03\x03", objectID$, iToVolumePercent(reference$));
	if(subscribe)
	{
		makeString(tx$, "\x8F\x00\x00\x03%s\x00\x03\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //REFERENCE
		processlogic();		
	}
}

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{
					if(byte(tempString, 10) = 1)
					{
						attack_fb$ = volumePercentToI(mid(tempString, 11, 4));
					}
					else if (byte(tempString, 10) = 2)
					{
						release_fb$ = volumePercentToI(mid(tempString, 11, 4));
					}
					else if (byte(tempString, 10) = 3)
					{
						reference_fb$ = volumePercentToI(mid(tempString, 11, 4));					
					}			
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK = 1;
	subscribe = 0;
}
