/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Analog Input Card v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to be used with the "BSS Soundweb Analog Input Card.umc" module
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT subscribe$;
DIGITAL_INPUT phantomSwitch$[8];
ANALOG_INPUT card$;
BUFFER_INPUT rx$[400];
ANALOG_INPUT meterRate$;
ANALOG_INPUT value$[20];

DIGITAL_OUTPUT phantomSwitch_fb$[8];
STRING_OUTPUT tx$;
ANALOG_OUTPUT value_fb$[20];
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK;
STRING tempString[40];
STRING returnString[4];
INTEGER returnI,subscribe;   
INTEGER i, xValue, xPhantom, stateVarValue, stateVarPhantom, stateVarReceive;
INTEGER volumeInput[40];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function iToVolumePercent(INTEGER int)
{                 
	if (int MOD 2 = 0)
	{                   
		returnString = "\x00" + chr(int/2) + "\x00\x00";
	}
	else 
	{
		returnString = "\x00" + chr(int/2) + "\x80\x00";
	} 	
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{                     
	if (!(mid(str, 3, 1) = "\x00"))
	{                   
		returnI = (byte(str, 2)*2)+1;
	}
	else 
	{
		returnI = byte(str, 2)*2;
	} 	
    Return (returnI);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH subscribe$
{      	
	wait(20)
	{
		for (i = 1 to 4)
		{                                                                                                                                    
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 0), chr(high(meterRate$)), chr(low(meterRate$)));  //METER
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 1));  //REFERENCE
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 2));  //ATTACK
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 3));  //RELEASE
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 4));  //GAIN
				processlogic();		
				makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 5));  //PHANTOM SWITCH
				processlogic();		
		}
	
	subscribe = subscribe$;
	}
}


RELEASE subscribe$
{
	for (i = 1 to 4)
	{
		makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 0), chr(high(meterRate$)), chr(low(meterRate$)));  //METER
		processlogic();
		makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 1));  //REFERENCE
		processlogic();
		makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 2));  //ATTACK
		processlogic();
		makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 3));  //RELEASE
		processlogic();
		makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 4));  //GAIN
		processlogic();		
		makeString(tx$, "\x8A\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 5));  //PHANTOM SWITCH
		processlogic();		
	}	
	subscribe = subscribe$;
}

CHANGE value$
{          
	xValue = getLastModifiedArrayIndex();
    stateVarValue = (((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(value$[xValue] <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = value$[xValue];
		value_fb$[xValue] = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(value$[xValue]));
	}

}
  
  
PUSH phantomSwitch$
{                   
	xPhantom = getLastModifiedArrayIndex();
	if (xPhantom <= 4)
	{
		stateVarPhantom = ((xPhantom-1) * 6) + 5;
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH
			processlogic();
		}
	}
	else
	{
		stateVarPhantom = ((xPhantom-5) * 6) + 5;
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));		

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH
			processlogic();
		}

	}
}
  
CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || ((mid(tempString, 6, 2) = "\x00\x00") && (byte(tempString, 8) = card$)))
				{             
					stateVarReceive = byte(tempString, 10);
					if ((stateVarReceive MOD 6) = 5)
					{               
						if (byte(tempString, 14))
						{                                                
							phantomSwitch_fb$[(stateVarReceive/6)+5] = 0;
							phantomSwitch_fb$[(stateVarReceive/6)+1] = 1;
						}
						else
						{
							phantomSwitch_fb$[(stateVarReceive/6)+1] = 0;
							phantomSwitch_fb$[(stateVarReceive/6)+5] = 1;
						}
					}
					else
					{
						//stateVarReceive = ((stateVarReceive / 6) * 5) + ((stateVarReceive MOD 6) + 1)-1;
						volumeInput[stateVarReceive] = volumePercentToI(mid(tempString, 11, 4));
						switch(stateVarReceive)
						{
							case(0): value_fb$[1] = volumeInput[stateVarReceive];//Ch1.Meter
							case(1): value_fb$[2] = volumeInput[stateVarReceive]; //Ch1. Reference
							case(2): value_fb$[3] = volumeInput[stateVarReceive]; //ch1. Attack
							case(3): value_fb$[4] = volumeInput[stateVarReceive]; //Ch1. Release
							case(4): value_fb$[5] = volumeInput[stateVarReceive]; //Ch1. Gain
							//case(5): value_fb$[6] = volumeInput[stateVarReceive]; //Ch1. Phantom
							case(6): value_fb$[6] = volumeInput[stateVarReceive];
							case(7): value_fb$[7] = volumeInput[stateVarReceive];
							case(8): value_fb$[8] = volumeInput[stateVarReceive];
							case(9): value_fb$[9] = volumeInput[stateVarReceive];
							case(10): value_fb$[10] = volumeInput[stateVarReceive];
							//case(11): value_fb$[12] = volumeInput[stateVarReceive];
							case(12): value_fb$[11] = volumeInput[stateVarReceive];
							case(13): value_fb$[12] = volumeInput[stateVarReceive];
							case(14): value_fb$[13] = volumeInput[stateVarReceive];
							case(15): value_fb$[14] = volumeInput[stateVarReceive];
							case(16): value_fb$[15] = volumeInput[stateVarReceive];
							//case(17): value_fb$[18] = volumeInput[stateVarReceive];
							case(18): value_fb$[16] = volumeInput[stateVarReceive];
							case(19): value_fb$[17] = volumeInput[stateVarReceive];
							case(20): value_fb$[18] = volumeInput[stateVarReceive];
							case(21): value_fb$[19] = volumeInput[stateVarReceive];
							case(22): value_fb$[20] = volumeInput[stateVarReceive];
							//case(23): value_fb$[24] = volumeInput[stateVarReceive];

						}//switch
					}//else
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK = 1;
	subscribe = 0;
}
