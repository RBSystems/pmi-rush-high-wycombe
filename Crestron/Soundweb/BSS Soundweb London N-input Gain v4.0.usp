/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London N-input Gain v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to be used with the "BSS Soundweb N-input Gain.umc" module
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT mute$, unMute$;
DIGITAL_INPUT polarityOn$, polarityOff$;
ANALOG_INPUT gain$;
STRING_INPUT objectID$[3];
DIGITAL_INPUT subscribe$;
ANALOG_INPUT input$;
BUFFER_INPUT rx$[400];

DIGITAL_OUTPUT mute_fb$, polarity_fb$;
ANALOG_OUTPUT gain_fb$;
STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER stateVar,subscribe,stateVar_fb,volumeInput;
STRING returnString[4];
INTEGER returnI,gain;
INTEGER xOK;
STRING tempString[40];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function iToVolumePercent(INTEGER int)
{                 
	if (int MOD 2 = 0)
	{                   
		returnString = "\x00" + chr(int/2) + "\x00\x00";
	}
	else 
	{
		returnString = "\x00" + chr(int/2) + "\x80\x00";
	} 	
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{                     
	if (!(mid(str, 3, 1) = "\x00"))
	{                   
		returnI = (byte(str, 2)*2)+1;
	}
	else 
	{
		returnI = byte(str, 2)*2;
	} 	
    Return (returnI);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH mute$
{        
	stateVar = 32 + (input$-1);
	makeString(tx$, "\x88\x00\x00\x03%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(stateVar));
	if(subscribe)
	{
 		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //subscribe MUTE
		processlogic();
	}
}

PUSH unMute$
{
	stateVar = 32 + (input$-1);
	makeString(tx$, "\x88\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));
	if(subscribe)
	{
 		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //subscribe MUTE
		processlogic();
	}
}

PUSH polarityOn$
{
	stateVar = 64 + (input$-1);
	makeString(tx$, "\x88\x00\x00\x03%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(stateVar));
	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //POLARITY
		processlogic();
	}
}

PUSH polarityOff$
{
	stateVar = 64 + (input$-1);
	makeString(tx$, "\x88\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));
	if(subscribe)
	{
 		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //POLARITY
		processlogic();
	}
}

CHANGE gain$
{
	stateVar = input$-1;
	if(volumeInput<> gain$)
	{
    volumeInput = gain$;
		gain_fb$ = gain$;
		makeString(tx$, "\x8D\x00\x00\x03%s\x00%s%s\x03\x03\x03\x03\x03", objectID$, chr(stateVar), iToVolumePercent(gain$));
	}
}
  
PUSH subscribe$
{
	wait(20)
	{
		stateVar = input$-1;
		makeString(tx$, "\x8E\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //GAIN
		processlogic();
		stateVar = 32 + (input$-1);
		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //MUTE
		processlogic();
		stateVar = 64 + (input$-1);
		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //POLARITY
		processlogic();
		subscribe = subscribe$;
	}
}

RELEASE subscribe$
{
	stateVar = input$-1;
	makeString(tx$, "\x8F\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //GAIN
	processlogic();
	stateVar = 32 + (input$-1);
	makeString(tx$, "\x8A\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //MUTE
	processlogic();
	stateVar = 64 + (input$-1);
	makeString(tx$, "\x8A\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(stateVar));  //POLARITY
	processlogic();
	subscribe = subscribe$;
}

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{      
					if (byte(tempString, 10) MOD 32 = input$ - 1)
					{           
						if(byte(tempString, 10) < 16)
						{            
							if (gain <> volumePercentToI(mid(tempString, 11, 4)))
							{
								gain = volumePercentToI(mid(tempString, 11, 4));
								gain_fb$ = gain;
							}
						}
						else if (byte(tempString, 10) < 48)
						{
							mute_fb$ = byte(tempString, 14);
						}
						else if (byte(tempString, 10) < 80)
						{
							polarity_fb$ = byte(tempString, 14);					
						}
					}
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK = 1;
	subscribe = 0;
}
