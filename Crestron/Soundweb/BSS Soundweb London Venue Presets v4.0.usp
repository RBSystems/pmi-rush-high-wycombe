/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Venue Presets v4.0"
// #HINT ""
#DEFINE_CONSTANT MAXPRESETS 100
// #CATEGORY "" 
#CATEGORY "34" // Mixer
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
BSS Soundweb London

This modules controls the "Venue presets" of a Soundweb London device.
As "Venue presets" don't have an object Id, there's no need for it in this module.

The TX of this module should be connected directly to the RS232 or IP comm port.  Do 
NOT connect this to the NODE module.

You cannot subscribe to presets

INPUTS 
------
recallPreset$[X]: pulse to recall preset X

OUTPUTS
-------
tx:               connected directly to the RS232 or IP comm port   (add additional lines of help lines)
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT recallPreset$[MAXPRESETS];

STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER x;
INTEGER i;
STRING returnString[4];  
STRING command[80];
INTEGER checksum;                   
STRING sendString[100];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function send(STRING str)
{        
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str))                                                               
	{             
		checksum = checksum ^ byte(str, i);
		if (byte(str, i) = 2 || byte(str, i) = 3 || byte(str, i) = 6 || byte(str, i) = 21 || byte(str, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(tx$, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(tx$, "\x02%s%s\x03", sendString, chr(checksum));
	}                                      
}

String_Function iToString(INTEGER int, INTEGER size)
{                   
	returnString = "";
	if (int <= 255)
	{                   
		for (i = 1 to size-1)
		{
			returnString = returnString + "\x00";
		}
		returnString = returnString + chr(int);
	}
	else 
	{
		for (i = 1 to size-2)
		{
			returnString = returnString + "\x00";
		}                                        
		returnString = returnString + chr(high(int)) + chr(low(int));
	} 	
    Return (returnString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH recallPreset$
{
	x = getLastModifiedArrayIndex();
	makeString(command, "\x8B%s", iToString(x, 4));
	call send(command);
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/
