/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Delay v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to be used with the "BSS Soundweb Delay.umc" module
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT subscribe$;
ANALOG_INPUT delay$;
STRING_INPUT objectID$[3];
BUFFER_INPUT rx$[400];

ANALOG_OUTPUT delay_fb$;
STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK;
STRING tempString[40];
STRING delayString[5];
LONG_INTEGER delayValue;
INTEGER delay1, delay2, delay3;
STRING delaySendString[4];
INTEGER value_fb, decimalValue_fb;                        
LONG_INTEGER delayValue_fb;
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE delay$
{
	delayString = itoa(delay$);
	delayValue = (atoi(right(delayString, 1)) * 96) / 10;
	delayValue = delayValue + atoi(left(delayString, len(delayString)-1)) * 96;
	delay1 = delayValue / 65536;
	delay2 = (delayValue - (delay1 * 65536)) /256;  
	delay3 = delayValue - ((delayValue / 256) * 256);                          
	delaySendString = "\x00" + chr(delay1) + chr(delay2) + chr(delay3);
	makeString(tx$, "\x88\x00\x00\x03%s\x00\x00%s\x03\x03\x03\x03\x03", objectID$, delaySendString);
}

PUSH subscribe$
{
	makeString(tx$, "\x89\x00\x00\x03%s\x00\x00\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //MUTE
}

RELEASE subscribe$
{
	makeString(tx$, "\x8A\x00\x00\x03%s\x00\x00\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //MUTE
}

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{
					delayValue_fb = 0;
					delayValue_fb = delayValue_fb + byte(tempString, 12) * 65536;	      
					delayValue_fb = delayValue_fb + byte(tempString, 13) * 256;
					delayValue_fb = delayValue_fb + byte(tempString, 14);
					if (delayValue_fb <= 261120)
					{                       
						value_fb = delayValue_fb / 96;
						decimalValue_fb = ((delayValue_fb - (96 * value_fb)) * 10) / 96;
						delay_fb$ = (value_fb * 10) + decimalValue_fb;
					}
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK = 1;
}
