/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: 
System Name:BSS Audio Soundweb London Room Combine
System Number:
Programmer: Scott Emery 4/1/2008 - PAC - 1/23/2009
Comments:  */

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Room Combine v4.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
This module is used to control a Room Combine Processing Object inside London Architect.   
Offset: 0 for Rm1-8; 1 for Rm9-16; 2 for Rm17-24, etc

All Mutes are toggle.  On each rising edge the mutestate will change.

Enable Feedback: While high a subscription will be sent out that will sync the Crestron to
the current state of the London.  From that point on all feedback will be real.  Once this signal 
goes low the London will not report feedback.

Only to be used within the "BSS Soundweb London Room Combine.umc"

v4.0 - 1-23-2009 - PAC - Change the STRING_INPUT RX$ to a BUFFER_INPUT. This prevents the
												 loss of data. Increased the size of the buffer from 400 to 4000.
												 This also helps prevent the loss of data. Added inputs to resubscribe
												 to a gain object that has been changed by the Crestron. This assures
												 that we are in sync with the BSS.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Enable_Feedback$;
STRING_INPUT objectID$[3];
BUFFER_INPUT RX$[4000];

STRING_OUTPUT TX$;

Digital_Input SourceMute$[8], BGM_Mute$[8], MasterMute$[8], Partition$[8],
							Source_Gains_Change[8], BGM_Gains_Change[8], Master_Gains_Change[8]; // 1-23-2009 - PAC - Added to get the current status after a change
ANALOG_INPUT Chan_Offset$, Max_Rooms$, SourceGain$[8], BGM_Gain$[8], MasterGain$[8], BGM_Input$[8],Group$[8];




// BUFFER_INPUT 

DIGITAL_OUTPUT SourceMute_FB$[8], BGM_Mute_FB$[8], MasterMute_FB$[8],Partition_FB$[8];
ANALOG_OUTPUT SourceGain_FB$[8], BGM_Gain_FB$[8], MasterGain_FB$[8], BGM_Input_FB$[8],Group_FB$[8];


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER offset,feedback,stateVar,SV,SV_MOD,stateVarGain,stateVarSub, stateVarUnSub,x;
STRING returnString[4];
INTEGER returnI,SourceGain[8], BGM_Gain[8], MasterGain[8];

INTEGER xOK,i;
STRING tempString[40]; 


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

String_Function iToVolumePercent(INTEGER int)
{                 
	if (int MOD 2 = 0)
	{                   
		returnString = "\x00" + chr(int/2) + "\x00\x00";
	}
	else 
	{
		returnString = "\x00" + chr(int/2) + "\x80\x00";
	} 	
    Return (returnString);
}


Integer_Function volumePercentToI(STRING str)
{                     
	if (!(mid(str, 3, 1) = "\x00"))
	{                   
		returnI = (byte(str, 2)*2)+1;
	}
	else 
	{
		returnI = byte(str, 2)*2;
	} 	
    Return (returnI);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
       
Change Chan_Offset$
{
  	offset = Chan_Offset$*8;//zero for channels 1-8 (no offset ,offset = 0); offset = 1 for channels 9-16; offset = 2 for channels 17-24....
}  


PUSH Enable_Feedback$
{
	wait(20)
	{
	 	feedback = 1;
	     
		for(i = 1 to Max_Rooms$) //subscribe to all variables for feedback
		{
		    stateVarSub = (((i+offset)-1) * 50) + 256;//SourceMute
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SourceMUTE   	    
		    stateVarSub = (((i+offset)-1) * 50) + 258;//BGM Mute
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM MUTE   	    
		    stateVarSub = (((i+offset)-1) * 50) + 254;//MasterMute
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MasterMUTE   	    
	
		    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
		    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
		    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain
	
		    stateVarSub = (((i+offset)-1) * 50) + 259;//BGM Input
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM Input   	    

			stateVarSub = ((i+offset)-1);//Partition
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Partition

			stateVarSub = (((i+offset)-1) * 50) + 250;//Group
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Group
		}	
	}
}
         
RELEASE Enable_FeedBack$
{
	 feedback = 0;
	     
	for(i = 1 to Max_Rooms$) //subscribe to all variables for feedback
	{
	    stateVarSub = (((i+offset)-1) * 50) + 256;//SourceMute
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SourceMUTE   	    
	    stateVarSub = (((i+offset)-1) * 50) + 258;//BGM Mute
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM MUTE   	    
	    stateVarSub = (((i+offset)-1) * 50) + 254;//MasterMute
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MasterMUTE   	    

	    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
	    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
	    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain

	    stateVarSub = (((i+offset)-1) * 50) + 259;//BGM Input
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM Input   	    

		stateVarSub = ((i+offset)-1);//Partition
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Partition

		stateVarSub = (((i+offset)-1) * 50) + 250;//Group
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Group
	}
}

PUSH SourceMute$
{        
	x = getLastModifiedArrayIndex();
    stateVar = (((x+offset)-1) * 50) + 256; //SVID of SourceMute
   
	if (SourceMute_FB$[x])//muted
   		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));//ummute
	else //unmute
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));//mute

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
/*
RELEASE SourceMute$
{ //ummute       
	x = getLastModifiedArrayIndex();

	stateVar = (((x+offset)-1) * 50) + 256;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
*/

PUSH BGM_Mute$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 258; //SVID of SourceMute
	
	if(BGM_Mute_FB$[x])
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	else
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
/*
RELEASE BGM_Mute$
{//unmute        
	x = getLastModifiedArrayIndex();

	stateVar = (((x+offset)-1) * 50) + 258;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
*/      
 
PUSH MasterMute$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 254; //SVID of SourceMute

	if(MasterMute_FB$[x])
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	else
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
/*
RELEASE MasterMute$
{//unmute        
	x = getLastModifiedArrayIndex();

	stateVar = (((x+offset)-1) * 50) + 254;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
*/
         
CHANGE SourceGain$
{	
    x = getLastModifiedArrayIndex();

	if(SourceGain[x] <> SourceGain$[x])
	{
		stateVar = (((x+offset)-1) * 50)+255;
    	SourceGain[x] = SourceGain$[x];
		SourceGain_FB$[x] = SourceGain$[x];
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(SourceGain$[x]));		
	}
}
/************************************************************************
1-23-2009 - PAC
	Added this to get the current value from the BSS SoundWeb London Blu.
The London Blu does not send automatic updates to the controlling device
for the object being controlled. This way we resend the subscribe command
to the BSS. This causes the BSS to send us the current value.
************************************************************************/
RELEASE Source_Gains_Change
{
	i = getlastmodifiedarrayindex();
	if(feedback)
	{
	    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
		makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
	}
}
     
CHANGE BGM_Gain$
{	
    x = getLastModifiedArrayIndex();

	if(BGM_Gain[x] <> BGM_Gain$[x])
	{
		stateVar = (((x+offset)-1) * 50)+257;
    	BGM_Gain[x] = BGM_Gain$[x];
		BGM_Gain_FB$[x] = BGM_Gain$[x];
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(BGM_Gain$[x]));		
	}
}

/************************************************************************
1-23-2009 - PAC
	Added this to get the current value from the BSS SoundWeb London Blu.
The London Blu does not send automatic updates to the controlling device
for the object being controlled. This way we resend the subscribe command
to the BSS. This causes the BSS to send us the current value.
************************************************************************/
RELEASE BGM_Gains_Change
{
	i = getlastmodifiedarrayindex();
	if(feedback)
	{
	    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
		makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
	}
}
         
CHANGE MasterGain$
{	
    x = getLastModifiedArrayIndex();

	if(MasterGain[x] <> MasterGain$[x])
	{
		stateVar = (((x+offset)-1) * 50)+252;
    	MasterGain[x] = MasterGain$[x];
		MasterGain_FB$[x] = MasterGain$[x];
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(MasterGain$[x]));		
	}
}

/************************************************************************
1-23-2009 - PAC
	Added this to get the current value from the BSS SoundWeb London Blu.
The London Blu does not send automatic updates to the controlling device
for the object being controlled. This way we resend the subscribe command
to the BSS. This causes the BSS to send us the current value.
************************************************************************/
RELEASE Master_Gains_Change
{
	i = getlastmodifiedarrayindex();
	if(feedback)
	{
	    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
		makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain
	}
}
          
CHANGE BGM_Input$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 259; //SVID of SourceMute

	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)),chr(BGM_Input$[x]));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  	    
}

PUSH Partition$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (x+offset)-1; //SVID of Partition

	if(Partition_FB$[x])
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	else
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));    	    
}

CHANGE Group$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 250; //SVID of Group

	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)),chr(Group$[x]));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));    	    
}



CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))//ObjectID
				{   
					SV = ((byte(tempString, 9) * 256 ) + byte(tempString, 10)); //SV
                         
					if(SV < 49)//partition
						Partition_FB$[(SV+1-offset)] = byte(tempString,14);	//Partition	
					Else if(SV > 249)
					{		
						SV_MOD = (SV MOD 50);
   				
						Switch(SV_MOD)
						{
							Case(0):{Group_FB$[(SV-200)/50-offset] = byte(tempString,14);}//Group
        	            	Case(6):{SourceMute_FB$[(SV-206)/50-offset] = byte(tempString,14);} //Source Mute -value of SV (mute-state)
							Case(8):{BGM_Mute_FB$[(SV-208)/50-offset] = byte(tempString,14);} //BGM Mute
							Case(4):{MasterMute_FB$[(SV-204)/50-offset] = byte(tempString,14);}//Master Mute
							Case(5)://Source Gain
							{
								SourceGain[(SV-205)/50-offset]= volumePercentToI(mid(tempString, 11, 4));
								SourceGain_FB$[(SV-205)/50-offset] = SourceGain[(SV-205)/50-offset];
							}
							Case(7)://BGM Gain
							{
								BGM_Gain[(SV-207)/50-offset]= volumePercentToI(mid(tempString, 11, 4));
								BGM_Gain_FB$[(SV-207)/50-offset] = BGM_Gain[(SV-207)/50-offset];
							} 
							Case(2)://Master Gain
							{
								MasterGain[(SV-202)/50-offset]= volumePercentToI(mid(tempString, 11, 4));
								MasterGain_FB$[(SV-202)/50-offset] = MasterGain[(SV-202)/50-offset];
							} 
							Case(9)://BGM Input
							{
								BGM_Input_FB$[(SV-209)/50-offset] = byte(tempString,14);
							} 
						}//switch SV_MOD
					}//else if SV > 249					
				}//if objectID
				clearbuffer(tempString);
			}//if find
		}//while
		xOK = 1;
	}//if xOK	
}//change_RX


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	feedback = 1;
	
	xOK = 1;	
	Offset = 0;
}


