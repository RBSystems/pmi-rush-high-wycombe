/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Source Matrix v4.0"
// #HINT ""
#DEFINE_CONSTANT MAXOUTPUT 96
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#HELP_BEGIN
Only to be used with the "BSS Soundweb Source Matrix.umc" module
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT subscribe$;
STRING_INPUT objectID$[3];
BUFFER_INPUT rx$[400];
ANALOG_INPUT iMAXOUTPUT,inputForOutput$[MAXOUTPUT];

STRING_OUTPUT tx$;
ANALOG_OUTPUT inputForOutput_fb$[MAXOUTPUT];
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK, i;
STRING tempString[40];
INTEGER x,xIndex, stateVar, subscribe;
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE inputForOutput$
{         
	xIndex = getLastModifiedArrayIndex();
	stateVar =  xIndex - 1;
	makeString(tx$, "\x88\x00\x00\x03%s\x00%s\x00\x00\x00%s\x03\x03\x03\x03\x03", objectID$, chr(statevar), chr(inputForOutput$[stateVar+1]));
	if(subscribe)
	{
  		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(xIndex-1));
		processlogic();  	
	}
}
  
PUSH subscribe$
{
	wait(20)
	{	
		for (i = 1 to iMAXOUTPUT)
		{
			makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(i-1));
			processlogic();
		}
		subscribe = subscribe$;
	}
}

RELEASE subscribe$
{
	for (i = 1 to iMAXOUTPUT)
	{
		makeString(tx$, "\x8A\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(i-1));
		processlogic();
	}
	subscribe = subscribe$;
}

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{
					inputForOutput_fb$[byte(tempString, 10)+1] = byte(tempString, 14);
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOK = 1;
	subscribe = 0;
}
